# Создайте класс, содержащий набор целых чисел.
# В классе должна быть реализована следующая функциональность:
# ■ Сумма элементов набора.
# ■ Среднеарифметическое элементов набора.
# ■ Максимум из элементов набора.
# ■ Минимум из элементов набора.
# Протестируйте все возможности созданного класса
# с помощью модульного тестирования(unittest).

#
# class IntegerSet:
#     def __init__(self, numbers):
#         """
#         Инициализирует набор целых чисел.
#         :param numbers: Список целых чисел.
#         :raises ValueError: Если хотя бы один элемент не является целым числом.
#         """
#         if not all(isinstance(num, int) for num in numbers):
#             raise ValueError("Все элементы набора должны быть целыми числами")
#         self.numbers = numbers
#
#     def sum(self):
#         """
#         Возвращает сумму элементов набора.
#         :return: Сумма всех целых чисел в наборе.
#         """
#         return sum(self.numbers)
#
#     def average(self):
#         """
#         Возвращает среднее арифметическое элементов набора.
#         :return: Среднеарифметическое как float.
#         :raises ValueError: Если набор пуст.
#         """
#         if len(self.numbers) == 0:
#             raise ValueError("Набор чисел пуст")
#         return sum(self.numbers) / len(self.numbers)
#
#     def maximum(self):
#         """
#         Возвращает максимальный элемент набора.
#         :return: Максимум среди целых чисел.
#         :raises ValueError: Если набор чисел пуст.
#         """
#         if len(self.numbers) == 0:
#             raise ValueError("Набор чисел пуст")
#         return max(self.numbers)
#
#     def minimum(self):
#         """
#         Возвращает минимальный элемент набора.
#         :return: Минимум среди целых чисел.
#         :raises ValueError: Если набор чисел пуст.
#         """
#         if len(self.numbers) == 0:
#             raise ValueError("Набор чисел пуст")
#         return min(self.numbers)





# Создайте класс для числа. В классе должна быть реализована следующая функциональность:
# ■ Запись и чтение значения.
# ■ Перевод числа в восьмеричную систему исчисления.
# ■ Перевод числа в шестнадцатеричную систему исчисления.
# ■ Перевод числа в двоичную систему исчисления.
# Протестируйте все возможности созданного класса
# с помощью модульного тестирования(unittest).

#
# class NumberConverter:
#     def __init__(self, number):
#         if not isinstance(number, int):
#             raise ValueError("Число должно быть целым числом")
#         self.number = number
#
#     def to_octal(self):
#         """Возвращает строковое представление числа в восьмеричной системе исчисления."""
#         return oct(self.number)
#
#     def to_hexadecimal(self):
#         """Возвращает строковое представление числа в шестнадцатеричной системе исчисления."""
#         return hex(self.number)
#
#     def to_binary(self):
#         """Возвращает строковое представление числа в двоичной системе исчисления."""
#         return bin(self.number)

